import scapy.all
from scapy.all import *
from sys import *

def data (type):
# STP
	if type == 'stpn':
	#native mac
		stpn = raw("\x01\x80\xc2\x00\x00\x00\xe8\x28\xc1\x0c\x5c\xca\x00\x69\x42\x42" \
				   "\x03\x00\x00\x03\x02\x7c\x80\x00\xe8\x28\xc1\x0c\x5c\xc0\x00\x00" \
				   "\x00\x00\x80\x00\xe8\x28\xc1\x0c\x5c\xc0\x80\x0a\x00\x00\x14\x00" \
				   "\x02\x00\x0f\x00\x00\x00\x40\x00\x65\x38\x3a\x32\x38\x3a\x63\x31" \
				   "\x3a\x30\x63\x3a\x35\x63\x3a\x63\x30\x00\x00\x00\x00\x00\x00\x00" \
				   "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x36\x17\x7f\x50\x28" \
				   "\x3c\xd4\xb8\x38\x21\xd8\xab\x26\xde\x62\x00\x00\x00\x00\x80\x00" \
				   "\xe8\x28\xc1\x0c\x5c\xc0\x14")
		return stpn
	
	if type == 'stpc':
	# changed mac
		stpc = raw("\x01\x23\x45\x67\x89\x10\xe8\x28\xc1\x0c\x5c\xca\x00\x69\x42\x42" \
				   "\x03\x00\x00\x03\x02\x7c\x80\x00\xe8\x28\xc1\x0c\x5c\xc0\x00\x00" \
				   "\x00\x00\x80\x00\xe8\x28\xc1\x0c\x5c\xc0\x80\x0a\x00\x00\x14\x00" \
				   "\x02\x00\x0f\x00\x00\x00\x40\x00\x65\x38\x3a\x32\x38\x3a\x63\x31" \
				   "\x3a\x30\x63\x3a\x35\x63\x3a\x63\x30\x00\x00\x00\x00\x00\x00\x00" \
				   "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x36\x17\x7f\x50\x28" \
				   "\x3c\xd4\xb8\x38\x21\xd8\xab\x26\xde\x62\x00\x00\x00\x00\x80\x00" \
				   "\xe8\x28\xc1\x0c\x5c\xc0\x14")
		return stpc

#LLDP
	if type == 'lldpn':
	#native mac	
		lldpn = raw("\x01\x80\xc2\x00\x00\x0e\x00\x04\x96\x1f\xa7\x26\x88\xcc\x02\x07" \
					"\x04\x00\x04\x96\x1f\xa7\x26\x04\x04\x05\x31\x2f\x33\x06\x02\x00" \
					"\x78\x06\x02\x00\x01\x06\x02\x00\x02\x06\x02\x00\x03\x00\x00\xff" \
					"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa\xbb")
		return lldpn
	
	if type == 'lldpc':
	#changed mac
		lldpc = raw("\x01\x23\x45\x67\x89\x11\x00\x04\x96\x1f\xa7\x26\x88\xcc\x02\x07" \
					"\x04\x00\x04\x96\x1f\xa7\x26\x04\x04\x05\x31\x2f\x33\x06\x02\x00" \
					"\x78\x06\x02\x00\x01\x06\x02\x00\x02\x06\x02\x00\x03\x00\x00\xff" \
					"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa\xbb")
		return lldpc

#LACP
	if type == 'lacpn':
	#native mac
		lacpn = raw("\x01\x80\xc2\x00\x00\x02\x00\x04\x96\x1f\x50\x6a\x88\x09\x01\x01" \
					"\x01\x14\x91\xf4\x00\x04\x96\x1f\x50\x6a\x80\x00\x00\x00\x00\x12" \
					"\x47\x00\x00\x00\x02\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x3b\x00\x00\x00\x03\x10\x00\x02\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
		return lacpn
	
	if type == 'lacpc':
	#changed mac
		lacpc = raw("\x01\x23\x45\x67\x89\x12\x00\x04\x96\x1f\x50\x6a\x88\x09\x01\x01" \
					"\x01\x14\x91\xf4\x00\x04\x96\x1f\x50\x6a\x80\x00\x00\x00\x00\x12" \
					"\x47\x00\x00\x00\x02\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x3b\x00\x00\x00\x03\x10\x00\x02\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
					"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
		return lacpc
#ISISl1
	if type == 'isisl1n':
		#native mac
		isisl1n = raw("\x01\x80\xc2\x00\x00\x14\xc2\x01\x29\x98\x00\x00\x00\x59\xfe\xfe" \
					  "\x03\x83\x1b\x01\x00\x12\x01\x00\x00\x00\x56\x04\xaf\x22\x22\x22" \
					  "\x22\x22\x22\x00\x00\x00\x00\x00\x09\x63\x0b\x01\x01\x04\x03\x49" \
					  "\x00\x0a\x81\x01\xcc\x89\x02\x52\x32\x84\x04\xc0\xa8\x0a\x01\x80" \
					  "\x18\x0a\x80\x80\x80\x0a\x00\x0a\x00\xff\xff\xff\xfc\x0a\x80\x80" \
					  "\x80\xc0\xa8\x0a\x00\xff\xff\xff\x00\x02\x0c\x00\x0a\x80\x80\x80" \
					  "\x33\x33\x33\x33\x33\x33\x02")
		return isisl1n

	if type == 'isisl1c':
	#changed mac
		isisl1c = raw("\x01\x23\x45\x67\x89\x13\xc2\x01\x29\x98\x00\x00\x00\x59\xfe\xfe" \
					  "\x03\x83\x1b\x01\x00\x12\x01\x00\x00\x00\x56\x04\xaf\x22\x22\x22" \
					  "\x22\x22\x22\x00\x00\x00\x00\x00\x09\x63\x0b\x01\x01\x04\x03\x49" \
					  "\x00\x0a\x81\x01\xcc\x89\x02\x52\x32\x84\x04\xc0\xa8\x0a\x01\x80" \
					  "\x18\x0a\x80\x80\x80\x0a\x00\x0a\x00\xff\xff\xff\xfc\x0a\x80\x80" \
					  "\x80\xc0\xa8\x0a\x00\xff\xff\xff\x00\x02\x0c\x00\x0a\x80\x80\x80" \
					  "\x33\x33\x33\x33\x33\x33\x02")
		return isisl1c

#ISISl2
	if type == 'isisl2n':
	#native mac
		isisl2n = raw("\x01\x80\xc2\x00\x00\x15\xc2\x03\x29\xa9\x00\x00\x00\x37\xfe\xfe" \
					  "\x03\x83\x1b\x01\x00\x14\x01\x00\x00\x00\x34\x04\xaf\x44\x44\x44" \
					  "\x44\x44\x44\x01\x00\x00\x00\x00\x03\x7e\xf7\x03\x02\x17\x00\x00" \
					  "\x80\x80\x80\x44\x44\x44\x44\x44\x44\x00\x00\x80\x80\x80\x33\x33" \
					  "\x33\x33\x33\x33\x00")

		return isisl2n

	if type == 'isisl2c':
	#changed mac
		isisl2c = raw("\x01\x23\x45\x67\x89\x14\xc2\x03\x29\xa9\x00\x00\x00\x37\xfe\xfe" \
					  "\x03\x83\x1b\x01\x00\x14\x01\x00\x00\x00\x34\x04\xaf\x44\x44\x44" \
					  "\x44\x44\x44\x01\x00\x00\x00\x00\x03\x7e\xf7\x03\x02\x17\x00\x00" \
					  "\x80\x80\x80\x44\x44\x44\x44\x44\x44\x00\x00\x80\x80\x80\x33\x33" \
					  "\x33\x33\x33\x33\x00")
		return isisl2c

# TODO: Autotest
# def s():
# 	while 1:
# 		a = sniff(iface=argv[1],count=1) 
# 		a.show()

if len(sys.argv) != 3:
	print "Syntax: <interface>  <bpdu all(n/c) / name: stp(n/c)       "
	print "    #NOTE:                                  lldp(n/c)      "
	print "    n - native mac                          lacp(n/c)      "
	print "    c - changed mac                         isisl(1/2)(n/c)"
	exit(0)

if (argv[2] == 'alln'):
	sendp(data('stpn') ,iface=argv[1], count=1, verbose=1)
	sendp(data('lacpn') ,iface=argv[1], count=1, verbose=1)
	sendp(data('lldpn') ,iface=argv[1], count=1, verbose=1)
	sendp(data('isisl1n') ,iface=argv[1], count=1, verbose=1)
	sendp(data('isisl2n') ,iface=argv[1], count=1, verbose=1)

elif (argv[2] == 'allc'):
	sendp(data('stpc') ,iface=argv[1], count=1, verbose=1)
	sendp(data('lacpc') ,iface=argv[1], count=1, verbose=1)
	sendp(data('lldpc') ,iface=argv[1], count=1, verbose=1)
	sendp(data('isisl1c') ,iface=argv[1], count=1, verbose=1)
	sendp(data('isisl2c') ,iface=argv[1], count=1, verbose=1)

else:
	sendp(data(argv[2]) ,iface=argv[1], count=1, verbose=1)